#include "n-arytree.h"

using namespace std;

treeNode::treeNode()
{}
////////////////////////////////////////////////////////////////////////////////


treeNode::treeNode(const string & val)
{
  setValue(val);
}
////////////////////////////////////////////////////////////////////////////////


treeNode::~treeNode()
{
  // for (auto & it : children)
  //   delete it;
}
////////////////////////////////////////////////////////////////////////////////


void treeNode::addChild(treeNode * node)
{
  children.push_back(node);
}
////////////////////////////////////////////////////////////////////////////////


int treeNode::numChildren()
{
  return children.size();
}
////////////////////////////////////////////////////////////////////////////////


treeNode * treeNode::getChild(const int & i)
{
  if (i >= children.size()) 
    return NULL;
  else
    return children.at(i);
}
////////////////////////////////////////////////////////////////////////////////


string treeNode::getValue()
{
  return value;
}
////////////////////////////////////////////////////////////////////////////////


void treeNode::setValue(const string & str)
{
  value = str;
}
////////////////////////////////////////////////////////////////////////////////


void treeNode::traverse(treeNode * node)
{
  printf("nodeval: %s\n", node->getValue().c_str());
  for (size_t i = 0; i < node->children.size(); i++)
  {
    traverse(node->children[i]);
  }
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


int main()
{
  treeNode node5("5");
  treeNode node4("4");
  treeNode node1("1");
  treeNode node2("2");
  treeNode node3("3");
  treeNode node9("9");
  treeNode node10("10");

  node5.addChild(&node4);
  node5.addChild(&node1);
  node5.addChild(&node2);
  node5.addChild(&node3);

  node4.addChild(&node9);
  node4.addChild(&node10);

  treeNode::traverse(&node5);

  return 0;
}
